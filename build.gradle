plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
}

group 'net.suqatri.redicloud'
version '1.3.0-' + getCommitHash() + '-SNAPSHOT'

tasks.register('buildAndCopy', Copy) {
    dependsOn projectBuild
    finalizedBy ':copyToTest'
}

tasks.register('copyToTest') {
    println 'Deleting test files'
    project.delete(
            file("${rootDir}/test/node-1/redicloud-node-base.jar"),
            file("${rootDir}/test/node-1/storage/redicloud-plugin-proxy.jar"),
            file("${rootDir}/test/node-1/storage/redicloud-plugin-minecraft.jar"),
            file("${rootDir}/test/node-2/redicloud-node-base.jar"),
            file("${rootDir}/test/node-2/storage/redicloud-plugin-proxy.jar"),
            file("${rootDir}/test/node-2/storage/redicloud-plugin-minecraft.jar")
    )
    println 'Copying files'
    dependsOn copyNodeBaseToNode1
    dependsOn copyNodeBaseToNode2
    dependsOn copyMinecraftPluginToNode1
    dependsOn copyMinecraftPluginToNode2
    dependsOn copyProxyPluginToNode1
    dependsOn copyProxyPluginToNode2
}

tasks.register('projectBuild') {
    dependsOn ':commons:build'
    dependsOn ':api:api:build'
    dependsOn ':api:api-default-impl:build'

    dependsOn ':commands:command-locales:build'
    dependsOn ':commands:command-core:build'
    dependsOn ':commands:command-bukkit:build'
    dependsOn ':commands:command-bungeecord:build'

    dependsOn ':api:api-node:build'
    dependsOn ':api:api-minecraft:build'
    dependsOn ':api:api-proxy:build'

    dependsOn ':node:node-base:build'
    dependsOn ':node:node-runner:build'

    dependsOn ':plugins:plugin-minecraft:build'
    dependsOn ':plugins:plugin-proxy:build'
}

tasks.register('copyNodeBaseToNode1', Copy) {
    from "node/node-base/build/libs/redicloud-node-base.jar"
    into 'test/node-1'
    rename "node-base-${project.version}-all.jar", "redicloud-node-base.jar"
}

tasks.register('copyMinecraftPluginToNode1', Copy) {
    from "plugins/plugin-minecraft/build/libs/redicloud-plugin-minecraft.jar"
    into 'test/node-1/storage'
    rename "plugin-minecraft-${project.version}-all.jar", "redicloud-plugin-minecraft.jar"
}

tasks.register('copyProxyPluginToNode1', Copy) {
    from "plugins/plugin-proxy/build/libs/redicloud-plugin-proxy.jar"
    into 'test/node-1/storage'
    rename "plugin-proxy-${project.version}-all.jar", "redicloud-plugin-proxy.jar"
}

tasks.register('copyNodeBaseToNode2', Copy) {
    from "node/node-base/build/libs/redicloud-node-base.jar"
    into 'test/node-2'
    rename "node-base-${project.version}-all.jar", "redicloud-node-base.jar"
}

tasks.register('copyMinecraftPluginToNode2', Copy) {
    from "plugins/plugin-minecraft/build/libs/redicloud-plugin-minecraft.jar"
    into 'test/node-2/storage'
    rename "plugin-minecraft-${project.version}-all.jar", "redicloud-plugin-minecraft.jar"
}

tasks.register('copyProxyPluginToNode2', Copy) {
    from "plugins/plugin-proxy/build/libs/redicloud-plugin-proxy.jar"
    into 'test/node-2/storage'
    rename "plugin-proxy-${project.version}-all.jar", "redicloud-plugin-proxy.jar"
}

tasks.register('publishToRepository') {
    dependsOn ':commons:publish'
    dependsOn ':api:api:publish'
    dependsOn ':api:api-default-impl:publish'

    dependsOn ':commands:command-locales:publish'
    dependsOn ':commands:command-core:publish'
    dependsOn ':commands:command-bukkit:publish'
    dependsOn ':commands:command-bungeecord:publish'

    dependsOn ':api:api-node:publish'
    dependsOn ':api:api-minecraft:publish'
    dependsOn ':api:api-proxy:publish'

    dependsOn ':node:node-base:publish'
    dependsOn ':node:node-runner:publish'

    dependsOn ':plugins:plugin-minecraft:publish'
    dependsOn ':plugins:plugin-proxy:publish'
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'maven-publish'

    version '1.3.0-' + getCommitHash() + '-SNAPSHOT'

    sourceCompatibility = '1.8'

    compileJava {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
        maven {
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
        maven {
            url = "https://repo1.maven.org/maven2/"
        }
        maven {
            url = 'https://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url = "https://repo.aikar.co/nexus/content/groups/aikar/"
        }
        maven {
            url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
        }
        maven {
            url = "https://repo1.maven.org/maven2/"
        }
    }

    dependencies {
        implementation('org.projectlombok:lombok:1.18.24')
        annotationProcessor('org.projectlombok:lombok:1.18.24')

        implementation('org.redisson:redisson:3.17.4')
        implementation('com.google.guava:guava:31.1-jre')
        implementation('org.jetbrains:annotations:23.0.0')
    }

    tasks.jar.dependsOn tasks.shadowJar

    shadowJar {
        archiveFileName.set("redicloud-${project.name}.jar")
        dependencies {
            configurations = [project.configurations.runtimeClasspath]
        }
        relocate 'io.netty', 'net.suqatri.redicloud.libs.io.netty'
    }

    task createProperties(dependsOn: processResources) {
        def file = new File("$projectDir/src/main/resources/redicloud.properties")
        if(!file.exists()) return
        file.withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p['git-hash'] = getCommitHash()
            p['git-branch-name'] = getCurrentBrancheName()
            p.store w, null
        }
    }

    publishing {
        try{
            publications {
                maven(MavenPublication) {
                    artifact("build/libs/${project.name}-${project.version}.jar") {
                        extension 'jar'
                    }
                }
            }
            repositories {
                maven {
                    name 'nexus'
                    url getRepoUrl()
                    allowInsecureProtocol true
                    credentials {
                        username project.repoUser
                        password project.repoPassword
                    }
                }
            }
        }catch(ignored) {}
    }
}

def isRelease() {
    return project.version.contains('-RELEASE')
}

def getRepoUrl(){
    if(isRelease()){
        return 'http://repo.suqatri.net:8081/repository/maven-releases/'
    }else{
        return 'http://repo.suqatri.net:8081/repository/maven-snapshots/'
    }
}

def getCommitHash() {
    def git = new ProcessBuilder('git', 'rev-parse', '--short', getCurrentBrancheName()).directory(project.projectDir).start()
    def inputStream = git.getInputStream();
    def reader = new BufferedReader(new InputStreamReader(inputStream))
    def commitHash = reader.readLine()
    git.waitFor()
    return commitHash
}

def getCurrentBrancheName(){
    def git = new ProcessBuilder('git', 'name-rev', '--name-only', 'HEAD').directory(project.projectDir).start()
    def inputStream = git.getInputStream();
    def reader = new BufferedReader(new InputStreamReader(inputStream))
    def branchName = reader.readLine()
    git.waitFor()
    return branchName
}

classes {
    dependsOn createProperties
}
